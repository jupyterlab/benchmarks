name: Check on JupyterLab

on:
  pull_request:
    branches: ['master']
  push:
    branches: ['master']

env:
  YARN_ENABLE_IMMUTABLE_INSTALLS: 0

jobs:
  test:
    runs-on: ubuntu-22.04

    env:
      # How many times to switch between each tabs
      BENCHMARK_SWITCHES: 3

    steps:
      - name: Checkout benchmarks project
        uses: actions/checkout@v3
        with:
          path: benchmarks

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip on Linux
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.10-${{ hashFiles('**/requirements.txt', 'setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.10

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Checkout JupyterLab
        uses: actions/checkout@v3
        with:
          repository: jupyterlab/jupyterlab
          ref: main
          path: reference

      - name: Install dependencies
        run: |
          set -ex
          bash ./scripts/ci_install.sh
          # Build dev mode
          jlpm run build
        working-directory: reference

      - name: Show jlpm version
        shell: bash
        run: |
          jlpm --version
        working-directory: benchmarks/tests

      - name: Install extensions
        # This is done after installing the reference in order to have jlpm available.
        run: |
          set -ex
          pip install ipywidgets plotly
          pip install -v extensions/fixed-data-table
          pip install jupyterlab-ui-profiler
          jupyter labextension disable @jupyterlab/ui-profiler:user-interface

          jupyter server extension list
          jupyter labextension list
        working-directory: benchmarks

      - name: Show yarn version
        shell: bash
        run: |
          yarn --version
        working-directory: benchmarks/tests

      - name: Install testing dependencies
        shell: bash
        run: |
          yarn install
        working-directory: benchmarks/tests

      - name: Launch JupyterLab
        shell: bash
        run: |
          yarn start-jlab 2>&1 > /tmp/jupyterlab_server.log &
        working-directory: benchmarks/tests

      - name: Install browser
        run: |
          set -ex
          # Install only Chromium browser
          yarn playwright install chromium
        working-directory: benchmarks/tests

      - name: Wait for JupyterLab
        id: waitForlab
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http-get://localhost:9999/lab
          timeout: 360000

      - name: Execute benchmark tests for validation
        working-directory: benchmarks/tests
        run: |
          set -ex
          # Update the snapshots
          BENCHMARK_NUMBER_SAMPLES=1 PW_VIDEO=1 yarn run test --project testing -u --grep-invert @slow
          # Check that all tests pass with updated snapshots
          BENCHMARK_NUMBER_SAMPLES=1 PW_VIDEO=1 yarn run test --project testing --grep-invert @slow

      - name: Kill the server
        if: always()
        shell: bash
        run: |
          kill -s SIGKILL $(pgrep jupyter-lab)

      - name: Upload Test assets
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-assets
          path: |
            benchmarks/tests/test-results/
            benchmarks/tests/tests-out/**/*.png

      - name: Print JupyterLab logs
        if: always()
        run: |
          cat /tmp/jupyterlab_server.log

  memory-leak-test:
    # uses: jupyterlab/benchmarks/.github/workflows/run-memory-leak.yml@master
    uses: ./.github/workflows/run-memory-leak.yml
    with:
      repository: jupyterlab/jupyterlab
      branch: main
