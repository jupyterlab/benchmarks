name: JupyterLab Benchmark Tests

on:
  schedule:
    # Every Sunday at 01:12am
    - cron: "12 1 * * 0"
  workflow_dispatch:
    inputs:
      challenger:
        description: "JupyterLab Git repository with the challenger version (format {owner}/{repo})"
        required: true
      challenger_branch:
        description: "Git repository reference to the challenger branch"
        required: true
      reference_branch:
        description: "Reference branch on the JupyterLab repository (default: master)"
        required: false
        default: "master"
      browser:
        description: "Which browser to use (one of 'chromium' [default], 'firefox', 'webkit')"
        required: false
        default: "chromium"
      samples:
        description: "Number of samples to compute"
        required: false
        default: "100"
      tests:
        description: 'List of test notebooks to include (available ["codeNotebook", "mdNotebook", "largeMetadata", "largePlotly", "longOutput", "manyPlotly", "manyOutputs", "errorOutputs"])'
        required: false
        default: '["codeNotebook", "mdNotebook", "longOutput", "errorOutputs"]'
      test_steps:
        description: 'List of test steps for each notebook (available ["open", "switch-with-copy", "switch-with-txt", "search", "start-debug", "close"])'
        required: false
        default: '["open", "switch-with-copy", "switch-with-txt", "close"]'
      size:
        description: "Test files size (bigger means larger test files)"
        required: false
        default: "100"

permissions:
  issues: write

jobs:
  test:
    uses: jupyterlab/benchmarks/.github/workflows/run-jupyterlab.yml@master
    with:
      event: ${{ github.event_name }}
      # Repository to clone for scheduled benchmark
      challenger: ${{ github.event.inputs.challenger || 'jupyterlab/jupyterlab' }}
      # Branch to checkout for scheduled benchmark
      challenger_branch: ${{ github.event.inputs.challenger_branch || 'master' }}
      reference_branch: ${{ github.event.inputs.reference_branch || 'master' }}
      # Which browser to use (one of 'chromium', 'firefox', 'webkit')
      browser: ${{ github.event.inputs.browser || 'chromium' }}
      # How many samples to compute the statistical distribution
      samples: ${{ github.event.inputs.samples || '100' }}
      # Notebooks to test
      tests: ${{ github.event.inputs.tests || '["codeNotebook", "mdNotebook", "longOutput"]' }}
      # Test steps to measure on each test notebook
      test_steps: ${{ github.event.inputs.test_steps || '["open", "search", "start-debug", "switch-with-copy", "switch-with-txt", "close"]' }}
      # The test notebook size
      size: ${{ github.event.inputs.size || '100' }}
      artifacts_name: 'benchmarks-report'

  second-files-set:
    # When running scheduled job - run search test in a separate job to avoid hitting the 6h limit.
    if: ${{ github.event_name == 'schedule' }}
    uses: jupyterlab/benchmarks/.github/workflows/run-jupyterlab.yml@master
    with:
      event: ${{ github.event_name }}
      # Repository to clone for scheduled benchmark
      challenger: ${{ github.event.inputs.challenger || 'jupyterlab/jupyterlab' }}
      # Branch to checkout for scheduled benchmark
      challenger_branch: ${{ github.event.inputs.challenger_branch || 'master' }}
      reference_branch: ${{ github.event.inputs.reference_branch || 'master' }}
      # Which browser to use (one of 'chromium', 'firefox', 'webkit')
      browser: ${{ github.event.inputs.browser || 'chromium' }}
      # How many samples to compute the statistical distribution
      samples: ${{ github.event.inputs.samples || '100' }}
      # Notebooks to test
      tests: ${{ github.event.inputs.tests || '["largeMetadata", "errorOutputs"]' }}
      # Test steps to measure on each test notebook
      test_steps: ${{ github.event.inputs.test_steps || '["open", "search", "start-debug", "switch-with-copy", "switch-with-txt", "close"]' }}
      # The test notebook size
      size: ${{ github.event.inputs.size || '100' }}
      artifacts_name: 'benchmarks-2-report'
