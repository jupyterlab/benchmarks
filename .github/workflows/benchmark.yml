name: JupyterLab Benchmark Tests

on:
  schedule:
    # Every Sunday at 01:12am
    - cron: '12 1 * * 0'
  workflow_dispatch:
    inputs:
      challenger:
        description: "JupyterLab Git repository with the challenger version (format {owner}/{repo})"
        required: true
      challenger_branch:
        description: "Git repository reference to the challenger branch"
        required: true
      reference_branch:
        description: "Reference branch on the JupyterLab repository (default: master)"
        required: false
        default: "master"
      samples:
        description: "Number of samples to compute"
        required: false
        default: "100"
      tests:
        description: 'List of test notebooks to include (available ["codeNotebook", "mdNotebook", "largePlotly", "longOutput", "manyPlotly", "manyOutputs", "errorOutputs"])'
        required: false
        default: '["codeNotebook", "mdNotebook", "longOutput", "errorOutputs"]'
      size:
        description: "Test files size (bigger means larger test files)"
        required: false
        default: "100"

jobs:
  test:
    runs-on: ubuntu-20.04

    env:
      # How many samples to compute the statistical distribution
      BENCHMARK_NUMBER_SAMPLES: ${{ github.event.inputs.samples }}
      # How many times to switch between each notebook
      BENCHMARK_SWITCHES: 3
      # The test notebook size
      BENCHMARK_MAX_N: ${{ github.event.inputs.size }}
      # Notebooks to test
      BENCHMARK_NOTEBOOKS: ${{ github.event.inputs.tests }}
      
      # Repository to clone for scheduled benchmark
      SCHEDULE_REPOSITORY: jupyterlab/jupyterlab
      # Branch to checkout for scheduled benchmark
      SCHEDULE_REF: master

    steps:
      - name: Checkout benchmarks project
        uses: actions/checkout@v2
        with:
          path: benchmarks

      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      # Freeze NodeJS to make CML happy
      - name: Install NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - uses: iterative/setup-cml@v1

      - name: Cache pip on Linux
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.8-${{ hashFiles('**/requirements.txt', 'setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.8

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn
        uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # First run the benchmark on the reference
      - name: Checkout reference branch
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v2
        with:
          repository: jupyterlab/jupyterlab
          ref: ${{ github.event.inputs.reference_branch }}
          path: reference

      - name: Checkout reference branch - schedule
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SCHEDULE_REPOSITORY }}
          ref: ${{ env.SCHEDULE_REF }}
          path: reference
          # Need to fetch enough nodes to get the commit of a week ago
          fetch-depth: 100

      - name: Checkout reference commit - schedule
        if: ${{ github.event_name == 'schedule' }}
        run: |
          export OLD_REF_SHA=$(git rev-parse '${SCHEDULE_REF}@{7 days ago}')
          git checkout ${OLD_REF_SHA}

      - name: Install dependencies
        run: |
          set -ex
          bash ./scripts/ci_install.sh
          # Build dev mode
          jlpm run build
        working-directory: reference

      - name: Install extensions
        # This is done after installing the reference in order to have jlpm available.
        run: |
          set -ex
          pip install ipywidgets plotly
          pip install -v extensions/fixed-data-table

          jupyter server extension list
          jupyter labextension list
        working-directory: benchmarks

      - name: Launch JupyterLab
        shell: bash
        run: |
          jlpm install
          # Mount a volume to overwrite the server configuration
          jlpm start-jlab 2>&1 > /tmp/jupyterlab_server_old.log &
        working-directory: benchmarks/tests

      - name: Install browser
        run: |
          set -ex
          # Install only Chromium browser
          jlpm playwright install chromium
        working-directory: benchmarks/tests

      - name: Wait for JupyterLab
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http-get://localhost:9999/lab
          timeout: 360000

      - name: Execute benchmark tests
        continue-on-error: true
        working-directory: benchmarks/tests
        run: |
          set -ex
          # Update test screenshots
          BENCHMARK_NUMBER_SAMPLES=1 jlpm run test --project jupyterlab -u

          jlpm run test --project jupyterlab -u
          cp tests-out/lab-benchmark-expected.json /tmp/

      - name: Kill the server
        shell: bash
        run: |
          kill -s SIGKILL $(pgrep jupyter-lab)
          pip uninstall --yes jupyterlab

      # Second benchmark run on the challenger
      - name: Checkout challenger
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.challenger }}
          ref: ${{ github.event.inputs.challenger_branch }}
          path: challenger

      - name: Checkout challenger - schedule
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SCHEDULE_REPOSITORY }}
          ref: ${{ env.SCHEDULE_REF }}
          path: challenger

      - name: Install dependencies
        run: |
          set -ex
          bash ./scripts/ci_install.sh
          # Build dev mode
          jlpm run build
        working-directory: challenger

      - name: Launch JupyterLab
        shell: bash
        run: |
          # Mount a volume to overwrite the server configuration
          jlpm start-jlab 2>&1 > /tmp/jupyterlab_server_new.log &
        working-directory: benchmarks/tests

      - name: Wait for JupyterLab
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http-get://localhost:9999/lab
          timeout: 360000

      - name: Execute benchmark tests
        continue-on-error: true
        shell: bash
        run: |
          set -ex
          # Update test screenshots
          BENCHMARK_NUMBER_SAMPLES=1 jlpm run test --project jupyterlab -u

          cp /tmp/lab-benchmark-expected.json ./tests-out
          jlpm run test --project jupyterlab
        working-directory: benchmarks/tests

      - name: Generate the report
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPORT: ./benchmark-results/lab-benchmark.md
        shell: bash
        working-directory: benchmarks/tests
        run: |
          # Publish image to cml.dev
          echo "" >> ${REPORT}
          cml-publish ./benchmark-results/lab-benchmark.png --md >> ${REPORT} || true
          echo "" >> ${REPORT}

          # Test if metadata have changed
          export METADATA_DIFF="/tmp/metadata.diff"
          diff -u <(jq --sort-keys .metadata benchmark-results/lab-benchmark.json) <(jq --sort-keys .metadata ./tests-out/lab-benchmark-expected.json) > ${METADATA_DIFF} || true
          if [[ -s ${METADATA_DIFF} ]]; then
            echo "<details><summary>:exclamation: Test metadata have changed</summary>" >> ${REPORT}
            echo "" >> ${REPORT}
            echo "\`\`\`diff" >> ${REPORT}
            cat ${METADATA_DIFF} >> ${REPORT}
            echo "\`\`\`" >> ${REPORT}
            echo "" >> ${REPORT}
            echo "</details>" >> ${REPORT}
          fi

          # Copy the reference data to upload it as artifact
          cp ./tests-out/lab-benchmark-expected.json ./benchmark-results/

      - name: Upload Benchmark Test assets
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-assets
          path: |
            benchmarks/tests/benchmark-results
            benchmarks/tests/test-results/*-1-*
            /tmp/benchmarks-*

      - name: Print JupyterLab logs
        if: always()
        run: |
          cat /tmp/jupyterlab_server_old.log
          cat /tmp/jupyterlab_server_new.log
