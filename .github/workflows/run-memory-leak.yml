name: Run JupyterLab Memory Leak Tests

on:
  workflow_call:
    inputs:
      repository:
        description: "JupyterLab Git repository (format {owner}/{repo})"
        required: true
        type: string
      branch:
        description: "Git branch to test"
        required: true
        type: string
      samples:
        description: "Number of samples to compute"
        required: false
        default: "7"
        type: string

jobs:
  memory-leak-test:
    runs-on: ubuntu-20.04

    env:
      # How many samples to compute
      MEMORY_LEAK_NSAMPLES: ${{ inputs.samples }}

    steps:
      - name: Checkout benchmarks project
        uses: actions/checkout@v2
        with:
          path: benchmarks

      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache pip on Linux
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.8-${{ hashFiles('**/requirements.txt', 'setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.8

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn
        uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Checkout JupyterLab
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}
          path: jupyterlab-repo

      - name: Install dependencies
        run: |
          set -ex
          bash ./scripts/ci_install.sh
          # Build dev mode
          jlpm run build
        working-directory: jupyterlab-repo

      - name: Launch JupyterLab
        shell: bash
        run: |
          # Mount a volume to overwrite the server configuration
          jlpm start-jlab 2>&1 > /tmp/jupyterlab_server.log &
        working-directory: benchmarks/memory-leaks

      - name: Execute memory leaks test
        uses: ./benchmarks/.github/actions/memory-leak
        with:
          github_token: "FAKE"
          server_url: "localhost:9999"

      - name: Kill the server
        if: always()
        shell: bash
        run: |
          kill -s SIGKILL $(pgrep jupyter-lab)

      - name: Print JupyterLab logs
        if: always()
        run: |
          cat /tmp/jupyterlab_server.log

